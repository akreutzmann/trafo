% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trafo_predict.R
\name{trafo_predict}
\alias{trafo_predict}
\title{Predict method for linear models with transformed dependent variable}
\usage{
trafo_predict(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,
  interval = c("none", "confidence", "prediction"), level = 0.95,
  type = "response", na.action = na.pass, pred.var = res.var/weights,
  weights = 1, ...)
}
\arguments{
\item{object}{an object of type \code{trafo_mod}.}

\item{newdata}{an optional data frame in which to look for variables with 
which to predict. If omitted, the fitted values are used.}

\item{se.fit}{a switch indicating if standard errors are required.}

\item{scale}{scale parameter for std. error calculation.}

\item{df}{degrees of freedom for scale.}

\item{interval}{type of interval calculation.}

\item{level}{tolerance/confidence level.}

\item{type}{type of prediction. In this version, only the response can be 
predicted. Thus, the default is set to "response".}

\item{na.action}{function determining what should be done with missing value 
in newdata. The default is to predict NA.}

\item{pred.var}{the variance for future observations to be assumed for 
prediction intervals.}

\item{weights}{variance weights for prediction. This can be a numeric vector 
or a one-sided model formula. In the latter case, it is interpreted as an 
expression evaluated in newdata.}

\item{...}{further arguments passed to or from other methods.}
}
\value{
A vector of predictions or a matrix of predictions and bounds with 
column names fit, lwr and upr if interval is set. 
If se.fit is \code{TRUE}, a list with the following components is returned: fit, 
se.fit, residual.scale, df
}
\description{
The function returns predicted values based on the linear model. The 
predicted values are back-transformed corresponding to the transformation 
used in the model. Note that the back-transformation can induce a bias.
}
\examples{
# Load data
data("cars", package = "datasets")

# Fit linear model
lm_cars <- lm(dist ~ speed, data = cars)

# Compare untransformed and transformed model
trafo_cars <- trafo_lm(object = lm_cars, trafo = "bickeldoksum", method = "skew", 
lambdarange = c(1e-11, 2))

# Get predictions in the back-transformed scale
trafo_predict(trafo_cars)
}
